Transfer and Critical Render Path Notes:
    Network Performace:
        1.Honey I shrunk the files:
            a.Minimize Text
                i.Take code that you have and put it thru UglifyJs(removes whitespace and cleans up space)
            b.Minimize Images 
                i.Change file format that works best for the job
                ii.Jpg:
                    a.multi-color images that are large in file size
                    b.Doesn't work well with transparancy 
                iii.GIF:
                    a.Limit color count that saves file size
                iv.PNG:
                    a.Limit color as well to bring down file size
                    b.Often used for logos
                    c.Transparancy can be added
                v.SVG:
                    a.Vector graphics
                    b.Incredibly small
                    c.Good for retna and 4k displays
                    d.Simplistic, lack colors
                vi.Compress as much as possible, and pick correct type.
                vii.When to use each type:
                    a.If you want transparancy: use a PNG
                    b.If you want animations:  use a GIF
                    c.If you want colorful images: use a JPG
                    d.If you want simple icons, logos, illustrations: use SVGs
                    e.Reduce PNG with TinyPNG
                    f.Reduce JPG with JPEG-optimizer
                    g.Try to choose simple illustractions over highly detailed photographs
                    h.Always lower JPEG image quality (30-60%)
                    i.Resize images based on size it will be displayed
                    j.Display different sized images for different backgrounds
                        1.Do this with media queries: 
                        2.Ex:
                            i@media screen and (width size) {}
                    k.Use CNDs linke imigx
                    l.Remove image metadata
        2.The traveling deliveryman:
            a.Less trips
                i.Minimize libraries needed/used
                ii.Browsers have set limits on files downloaded at once
    Critical Render Path:
        1.Path structure:
            a.DOM (HTML Files) -> CSSOM (CSS Files) -> RENDER Tree (JS Files) -> Layout ->Paint
        2.Optimizing HTML file control:
            a.Put CSS first so it can be downloaded faster (get it done as soon as possible)
            b.JS files at the bottom so all content is downloaded before the script is read
                i.Script can block rendering of the page if alerts or other actions occur
            c.Load style tags as fast as possible so render tree can be constructed 
        3.Optimizing CSS:
            a.CSS is render blocking
            b.Make as light weight as possible
            c.Only load whatever is needed, above the fold loading, lower specificity, and add media attributes
                i.Above the fold loading: Only load what is visibly seen by the user
                    1.<script type='text/javascript' const loadStyleSheet = src => {
                        if(document.createStylesheet){
                            document.createStylesheet(src)
                        } else{
                            const stylesheet = document.createElement('link');
                            stylesheet.href = src;
                            stylesheet.type = 'text/css';
                            stylesheet.rel = 'stylesheet';
                            document.getElementsByTagName('head')[0].appendChild(stylesheet);
                        }
                        window.onload = function() {
                            console.log('window done!');
                            loadStyleSheet(file_name);
                        }
                      </script
                ii.<link rel='stylesheet' href='file_name.css' media='only screen and (min-width: 500px)'> 
                iii.Less specificity: limit the amount of extra tags placed on top of css so it takes less time to calculate 
                iv.Internal Style Sheets -> only loads what is needed for the page type and stops us from having to require another new page (use with above the fold) 
                v.Inline css -> takes care of the html line at the specific time
        4.Optimizing JS:
            a.Load Scripts asynchronously, Defer loading to scripts, minimize DOM manipulation, avoid long running js
            b.Load scripts asynchronously: 
                i.<script async> 
                ii.loads scripts asynchronously rather than one long wait 
                iii.Can have issues if something loads before page renders
                iv.Only add to things that dont affect the DOM (trackers)
            c.Loading scripts after html has been parsed:
                i.<script defer>
                ii.Downloads in background but doesn't execute til HTML has loaded fully
                iii.Saves issues if script is needed for DOM manipulation
                iv.Only use on things that aren't super important, but still affect the DOM after the fold
        
